{"version":3,"sources":["./src/app/posts/post-list/post-list.component.html","./src/app/posts/post-list/post-list.component.ts","./src/app/posts/posts.module.ts","./src/environments/environment.ts","./src/app/auth/auth.guard.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/posts/posts.service.ts","./src/app/app.module.ts","./src/app/header/header.component.html","./src/app/header/header.component.ts","./src/app/posts/post-create/mime-type.validator.ts","./src/app/auth/auth-interceptor.ts","./src/app/auth/auth.service.ts","./src/app/angular-material.module.ts","./src/app/app-routing.module.ts","./src/app/posts/post-create/post-create.component.ts","./src/app/posts/post-create/post-create.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["<mat-spinner *ngIf=\"isLoading\" strokeWidth=8></mat-spinner>\r\n\r\n<mat-accordion multi=\"true\" *ngIf=\"posts.length > 0 && !isLoading\">\r\n    <mat-expansion-panel *ngFor=\"let post of posts; let index = i\">\r\n        <mat-expansion-panel-header>\r\n            {{post.title}}\r\n        </mat-expansion-panel-header>\r\n        <div class=\"post-image\">\r\n            <img [src]=\"post.imagePath\" [alt]=\"post.title\">\r\n        </div>\r\n        <p>{{post.content}}</p>\r\n        <mat-action-row *ngIf=\"userIsAuthenticated && userId === post.creator\">\r\n            <a mat-button class=\"editBtn\" [routerLink]=\"['/edit', post.id]\">Изменить</a>\r\n            <button mat-button color=\"warn\" (click)=\"onDelete(post.id)\">Удалить</button>\r\n        </mat-action-row>\r\n    </mat-expansion-panel>\r\n</mat-accordion>\r\n<mat-paginator \r\n    [length]=\"totalPosts\" \r\n    [pageSize]=\"postsPerPage\" \r\n    [pageSizeOptions]=\"pageSizeOptions\"\r\n    (page)=\"onChangePage($event)\" *ngIf=\"posts.length > 0\">\r\n</mat-paginator>\r\n\r\n<p class=\"info-text mat-body-1\" *ngIf=\"posts.length <= 0 && !isLoading\">Посты отсутствуют</p>\r\n<div class=\"noImgContainer\">\r\n    <img \r\n        src=\"/assets/lackofposts.jpg\" \r\n        alt=\"Печально...\" \r\n        class=\"lackOfPostsImg\"\r\n        *ngIf=\"posts.length <= 0 && !isLoading\"\r\n    >\r\n</div>","import { AuthService } from './../../auth/auth.service';\r\nimport { PostSerice } from './../posts.service';\r\nimport {Component, OnInit, OnDestroy} from '@angular/core'\r\nimport {Post} from '../post.model'\r\nimport {Subscription} from 'rxjs'\r\nimport { PageEvent } from '@angular/material/paginator';\r\n\r\n\r\n@Component({\r\n    selector: 'app-post-list',\r\n    templateUrl: './post-list.component.html',\r\n    styleUrls: ['./post-list.component.css']\r\n})\r\nexport class PostListComponent implements OnInit, OnDestroy{\r\n    posts: Post[] = []\r\n    private postSub: Subscription;\r\n    isLoading = false\r\n\r\n    totalPosts = 0;\r\n    postsPerPage = 2\r\n    pageSizeOptions = [1, 2, 5, 10]\r\n    currentPage = 1\r\n    \r\n    private authStatusSub: Subscription\r\n    private userIsAuthenticated = false\r\n\r\n    userId: string\r\n\r\n    constructor(public postsService: PostSerice, private authService: AuthService){}\r\n\r\n    ngOnInit(){\r\n        this.isLoading = true\r\n        this.postsService.getPosts(this.postsPerPage, this.currentPage)\r\n        this.userId = this.authService.getuserId()\r\n        this.postSub = this.postsService.getPostUpdateListener().subscribe((postData: {posts: Post[], postCount: number}) => {\r\n            this.isLoading = false\r\n            this.totalPosts = postData.postCount\r\n            this.posts = postData.posts;\r\n        })\r\n\r\n        this.userIsAuthenticated = this.authService.getIsAuth()\r\n\r\n        this.authStatusSub = this.authService.getAuthStatusListener()\r\n        .subscribe(isAuthenticate => {\r\n            this.userIsAuthenticated = isAuthenticate\r\n            this.userId = this.authService.getuserId()\r\n        })\r\n    }\r\n\r\n    onChangePage(pageData: PageEvent){\r\n        this.isLoading = true\r\n        this.currentPage = pageData.pageIndex + 1\r\n        this.postsPerPage = pageData.pageSize\r\n        this.postsService.getPosts(this.postsPerPage, this.currentPage)\r\n    }\r\n\r\n    onDelete(postId: string){\r\n        this.isLoading = true\r\n        this.postsService.deletePost(postId).subscribe(() => {\r\n            this.postsService.getPosts(this.postsPerPage, this.currentPage)\r\n        }, error => {\r\n            this.isLoading = false\r\n        })\r\n    }\r\n\r\n    ngOnDestroy(){\r\n        this.postSub.unsubscribe()\r\n        this.authStatusSub.unsubscribe()\r\n    }\r\n}","import { PostCreateComponent } from './post-create/post-create.component';\r\nimport { PostListComponent } from './post-list/post-list.component';\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AngularMaterialModule } from './../angular-material.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        PostCreateComponent,\r\n        PostListComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        AngularMaterialModule,\r\n        RouterModule\r\n    ]\r\n})\r\nexport class PostsModule{}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  api_url: 'http://localhost:3000/api'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { AuthService } from './auth.service';\r\nimport { Observable } from 'rxjs';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate{\r\n    constructor(private authService: AuthService, private router: Router){}\r\n    \r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Observable<boolean> | Promise<boolean> {\r\n        const isAuth = this.authService.getIsAuth()\r\n\r\n        if(!isAuth){\r\n            this.router.navigate(['/auth/login'])\r\n        }\r\n\r\n        return isAuth\r\n    }\r\n    \r\n}","import { AuthService } from './auth/auth.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  constructor(private authService: AuthService) {}\n\n  ngOnInit(){\n    this.authService.autoAuthUser()\n  }\n}\n","<app-header></app-header>\n<main>\n    <router-outlet></router-outlet>\n</main>\n","import { environment } from './../../environments/environment';\r\nimport { Post } from './post.model';\r\nimport { Injectable } from '@angular/core';\r\nimport {Subject} from 'rxjs'\r\nimport {HttpClient} from '@angular/common/http'\r\nimport {map} from 'rxjs/operators'\r\nimport { Router } from '@angular/router';\r\n\r\nconst POST_URL = environment.api_url + '/posts/'\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PostSerice{\r\n    private posts: Post[] = []\r\n    private postsUpdated = new Subject<{posts: Post[], postCount: number}>();\r\n\r\n    constructor(private http: HttpClient, private router: Router) {}\r\n\r\n    getPosts(postsPerPage: number, currentpage: number){\r\n        const queryParams = `?pagesize=${postsPerPage}&page=${currentpage}`\r\n        this.http.get<{message: string, posts: any, maxPosts: number}>(POST_URL + queryParams)\r\n        .pipe(map((postData) => {\r\n            return {posts: postData.posts.map(post => {\r\n                return {\r\n                    title: post.title,\r\n                    content: post.content,\r\n                    id: post._id,\r\n                    imagePath: post.imagePath,\r\n                    creator: post.creator\r\n                }\r\n            }), maxPosts: postData.maxPosts}\r\n        }))\r\n        .subscribe((transformedPostData) => {\r\n            this.posts = transformedPostData.posts;\r\n            this.postsUpdated.next({posts: [...this.posts], postCount: transformedPostData.maxPosts});\r\n        })\r\n    }\r\n\r\n    getPostUpdateListener(){\r\n        return this.postsUpdated.asObservable();\r\n    }\r\n\r\n    addPost(title: string, content: string, image: File){\r\n        const postData = new FormData()\r\n        postData.append(\"title\", title)\r\n        postData.append(\"content\", content)\r\n        postData.append(\"image\", image, title)\r\n        \r\n        \r\n        this.http.post<{message: string, post: Post}>(POST_URL, postData)\r\n        .subscribe((responseData) => {\r\n            this.router.navigate([\"/\"])\r\n        })\r\n        \r\n    }\r\n\r\n    updatePost(id: string, title: string, content: string, image: File | string){\r\n        let postData: Post | FormData\r\n\r\n        if(typeof image === \"object\"){\r\n            postData = new FormData()\r\n            postData.append(\"id\", id)\r\n            postData.append(\"title\", title)\r\n            postData.append(\"content\", content)\r\n            postData.append(\"image\", image, title)\r\n        }else{\r\n            postData = {\r\n                id: id, \r\n                title: title, \r\n                content: content, \r\n                imagePath: image,\r\n                creator: null\r\n            }\r\n\r\n        }\r\n\r\n        this.http.put(POST_URL + id, postData)\r\n        .subscribe(response => {\r\n            this.router.navigate([\"/\"])\r\n        })\r\n    }\r\n\r\n    deletePost(postId: string){\r\n        return this.http.delete(POST_URL + postId);\r\n    }\r\n\r\n    getPost(id: string){\r\n        return this.http.get<{_id: string, title: string, content: string, imagePath: string, creator: string}>(POST_URL + id)\r\n    }\r\n}","import { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http'\nimport { PostsModule } from './posts/posts.module';\nimport { AngularMaterialModule } from './angular-material.module';\nimport { AuthInterceptor } from './auth/auth-interceptor';\nimport { AppRoutingModule } from './app-routing.module';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    AngularMaterialModule,\n    PostsModule\n  ],\n  providers: [{provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<mat-toolbar>\r\n    <span><a routerLink=\"/\">Посты</a></span>\r\n    <span class=\"spacer\"></span>\r\n    <ul>\r\n        <li *ngIf=\"userIsAuthenticated\">\r\n            <a routerLink=\"/create\" routerLinkActive=\"active\">Добавить пост</a>\r\n        </li>\r\n        <li *ngIf=\"!userIsAuthenticated\">\r\n            <a routerLink=\"/auth/login\" routerLinkActive=\"active\">Войти</a>\r\n        </li>\r\n        <li *ngIf=\"!userIsAuthenticated\">\r\n            <a routerLink=\"/auth/signup\" routerLinkActive=\"active\">Регистрация</a>\r\n        </li>\r\n        <li *ngIf=\"userIsAuthenticated\">\r\n            <button class='logoutBtn'(click)=\"onLogout()\">Выйти</button>\r\n        </li>\r\n    </ul>\r\n</mat-toolbar>","import { Subscription } from 'rxjs';\r\nimport { AuthService } from './../auth/auth.service';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-header',\r\n    templateUrl: './header.component.html',\r\n    styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit, OnDestroy{\r\n    private authListenerSubs: Subscription\r\n    userIsAuthenticated = false\r\n    \r\n    constructor(private authService: AuthService){}\r\n\r\n    onLogout(){\r\n        this.authService.logout()\r\n    }\r\n\r\n    ngOnInit(){\r\n        this.userIsAuthenticated = this.authService.getIsAuth()\r\n        this.authListenerSubs = this.authService.getAuthStatusListener()\r\n        .subscribe(isAuthenticated => {\r\n            this.userIsAuthenticated = isAuthenticated\r\n        })\r\n    }\r\n\r\n    ngOnDestroy(){\r\n        this.authListenerSubs.unsubscribe()\r\n    }\r\n}\r\n","import { AbstractControl } from \"@angular/forms\";\r\nimport { Observable, Observer, of } from \"rxjs\";\r\n\r\nexport const mimeType = (\r\n  control: AbstractControl\r\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\r\n  if (typeof(control.value) === 'string') {\r\n    return of(null);\r\n  }\r\n  const file = control.value as File;\r\n  const fileReader = new FileReader();\r\n  const frObs = Observable.create(\r\n    (observer: Observer<{ [key: string]: any }>) => {\r\n      fileReader.addEventListener(\"loadend\", () => {\r\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\r\n        let header = \"\";\r\n        let isValid = false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n          header += arr[i].toString(16);\r\n        }\r\n        switch (header) {\r\n          case \"89504e47\":\r\n            isValid = true;\r\n            break;\r\n          case \"ffd8ffe0\":\r\n          case \"ffd8ffe1\":\r\n          case \"ffd8ffe2\":\r\n          case \"ffd8ffe3\":\r\n          case \"ffd8ffe8\":\r\n            isValid = true;\r\n            break;\r\n          default:\r\n            isValid = false; // Or you can use the blob.type as fallback\r\n            break;\r\n        }\r\n        if (isValid) {\r\n          observer.next(null);\r\n        } else {\r\n          observer.next({ invalidMimeType: true });\r\n        }\r\n        observer.complete();\r\n      });\r\n      fileReader.readAsArrayBuffer(file);\r\n    }\r\n  );\r\n  return frObs;\r\n};\r\n","import { AuthService } from './auth.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpResponse, HttpHandler } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor{\r\n    \r\n    constructor(private authService: AuthService) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler){\r\n        const authToken = this.authService.getToken()\r\n        const authRequest = req.clone({\r\n            headers: req.headers.set('Authorization', \"Bearer \" + authToken)\r\n        })\r\n        return next.handle(authRequest)\r\n    }\r\n}","import { environment } from './../../environments/environment';\r\nimport { Subject } from 'rxjs';\r\nimport { AuthData } from './auth-data.model';\r\nimport { Injectable } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http'\r\nimport { Router } from '@angular/router';\r\n\r\nconst AUTH_URL = environment.api_url + '/user/'\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class AuthService{\r\n    private isAuthenticate = false\r\n    private token: string;\r\n    private authStatusListener = new Subject<boolean>()\r\n\r\n    private tokenTimer: any\r\n\r\n    constructor(private http: HttpClient, private router: Router){}\r\n\r\n    private userId: string\r\n\r\n    getToken(){\r\n        return this.token\r\n    }\r\n\r\n    getIsAuth(){\r\n        return this.isAuthenticate\r\n    }\r\n\r\n    getuserId(){\r\n        return this.userId\r\n    }\r\n\r\n    getAuthStatusListener(){\r\n        return this.authStatusListener.asObservable()\r\n    }\r\n    \r\n    createUser(email: string, password: string){\r\n        const authData: AuthData = {email: email, password: password}\r\n        this.http.post(AUTH_URL + \"/signup\", authData)\r\n        .subscribe(() => {\r\n            this.router.navigate(['/auth/login'])\r\n        }, error => {\r\n            this.authStatusListener.next(false)\r\n        })\r\n    }\r\n\r\n    login(email: string, password: string){\r\n        const authData: AuthData = {email: email, password: password}\r\n\r\n        this.http.post<{token: string, expiresIn: number, userId: string}>(AUTH_URL + \"/login\", authData)\r\n        .subscribe(response => {\r\n            const token = response.token\r\n            this.token = token\r\n\r\n            if(token){\r\n                const expiresInDuration = response.expiresIn\r\n                this.setAuthTimer(expiresInDuration)\r\n\r\n                this.isAuthenticate = true\r\n                this.authStatusListener.next(true)\r\n                \r\n                this.userId = response.userId\r\n\r\n                const now = new Date()\r\n                const expirationDate = new Date(now.getTime() + expiresInDuration * 1000)\r\n                this.saveAuthData(token, expirationDate, this.userId)\r\n                this.router.navigate([\"/\"])\r\n            }\r\n        }, error => {\r\n            this.authStatusListener.next(false)\r\n        })\r\n    }\r\n\r\n    autoAuthUser(){\r\n        const authInformation = this.getAuthDate()\r\n        \r\n        if(!authInformation)\r\n            return\r\n            \r\n        const now = new Date()\r\n        const expiresIn = authInformation.expirationDate.getTime() - now.getTime()\r\n\r\n        if(expiresIn > 0){\r\n            this.token = authInformation.token\r\n            this.isAuthenticate = true\r\n            this.userId = authInformation.userId\r\n            this.setAuthTimer(expiresIn / 1000)\r\n            this.authStatusListener.next(true)\r\n        }\r\n    }\r\n\r\n    logout(){\r\n        this.token = null\r\n        this.isAuthenticate = false\r\n        this.authStatusListener.next(false)\r\n        clearTimeout(this.tokenTimer)\r\n        this.userId = null\r\n        this.clearAuthData()\r\n        this.router.navigate([\"/auth/login\"])\r\n    }\r\n\r\n    \r\n\r\n    private setAuthTimer(duration: number){\r\n        this.tokenTimer = setTimeout(() => {\r\n            this.logout()\r\n        }, duration * 1000);\r\n    }\r\n    private saveAuthData(token: string, expirationDate: Date, userId: string){\r\n        localStorage.setItem('token', token)\r\n        localStorage.setItem('expiration', expirationDate.toISOString())\r\n        localStorage.setItem(\"userId\", userId)\r\n    }\r\n\r\n    private clearAuthData(){\r\n        localStorage.removeItem(\"token\")\r\n        localStorage.removeItem(\"expiration\")\r\n        localStorage.removeItem(\"userId\")\r\n    }\r\n\r\n    getAuthDate(){\r\n        const token = localStorage.getItem(\"token\")\r\n        const expirationDate = localStorage.getItem(\"expiration\")\r\n        const userId = localStorage.getItem(\"userId\")\r\n        \r\n        if(!token || !expirationDate){\r\n            return\r\n        }\r\n\r\n        return{\r\n            token: token,\r\n            expirationDate: new Date(expirationDate),\r\n            userId: userId\r\n        }\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\n\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\n\r\n@NgModule({\r\n    imports: [\r\n        MatInputModule,\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatToolbarModule,\r\n        MatExpansionModule,\r\n        MatProgressSpinnerModule,\r\n        MatPaginatorModule\r\n    ],\r\n    exports: [\r\n        MatInputModule,\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatToolbarModule,\r\n        MatExpansionModule,\r\n        MatProgressSpinnerModule,\r\n        MatPaginatorModule\r\n    ]\r\n})\r\nexport class AngularMaterialModule{}","import { AuthGuard } from './auth/auth.guard';\r\nimport { PostCreateComponent } from './posts/post-create/post-create.component';\r\nimport { PostListComponent } from './posts/post-list/post-list.component';\r\nimport { NgModule } from \"@angular/core\";\r\nimport {RouterModule, Routes} from '@angular/router'\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: PostListComponent\r\n    },\r\n    {\r\n        path: 'create', component: PostCreateComponent, canActivate: [AuthGuard]\r\n    },\r\n    {\r\n        path: 'edit/:postId', component: PostCreateComponent, canActivate: [AuthGuard]\r\n    },\r\n    {\r\n        path: 'auth', loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule)\r\n    }\r\n]\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule],\r\n    providers: [AuthGuard]\r\n})\r\nexport class AppRoutingModule{}","import { AuthService } from './../../auth/auth.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { Post } from './../post.model';\r\nimport { PostSerice } from './../posts.service';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, ParamMap } from '@angular/router';\r\n\r\nimport {mimeType} from './mime-type.validator'\r\n\r\n@Component({\r\n    selector: 'app-post-create',\r\n    templateUrl: './post-create.component.html',\r\n    styleUrls: ['./post-create.component.css']\r\n})\r\nexport class PostCreateComponent implements OnInit, OnDestroy{\r\n    enteredTitle = \"\";\r\n    enteredContent = \"\";\r\n\r\n    private mode = 'create';\r\n    private postId: string;\r\n    editPost: Post;\r\n\r\n    isLoading = false\r\n    form: FormGroup\r\n    imagePreview: string\r\n\r\n    private authStatusSub: Subscription\r\n\r\n    constructor(public postsService: PostSerice, public route: ActivatedRoute, private authService: AuthService){}\r\n\r\n    ngOnInit(){\r\n        this.authStatusSub = this.authService.getAuthStatusListener()\r\n        .subscribe(authStatus => {\r\n            this.isLoading = false\r\n        })\r\n        this.form = new FormGroup({\r\n            'title': new FormControl(null, {validators: [Validators.required, Validators.minLength(3)]}),\r\n            'content': new FormControl(null, {validators: [Validators.required]}),\r\n            'image': new FormControl(null, {validators: [Validators.required], asyncValidators: [mimeType]})\r\n        })\r\n\r\n\r\n        this.route.paramMap.subscribe((paramMap: ParamMap) => {\r\n            if(paramMap.has(\"postId\")){\r\n                this.mode = 'edit'\r\n                this.postId = paramMap.get('postId')\r\n                this.isLoading = true\r\n                this.postsService.getPost(this.postId).subscribe(postData => {\r\n                    this.isLoading = false\r\n                    this.editPost = {\r\n                        id: postData._id, \r\n                        title: postData.title, \r\n                        content: postData.content,\r\n                        imagePath: postData.imagePath,\r\n                        creator: postData.creator\r\n                    }\r\n                    \r\n                    this.form.setValue({\r\n                        'title': this.editPost.title,\r\n                        'content': this.editPost.content,\r\n                        'image': this.editPost.imagePath\r\n                    })\r\n                })\r\n            }else{\r\n                this.mode = 'create'\r\n                this.postId = null;\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    onImagePicked(event: Event){\r\n        const file = (event.target as HTMLInputElement).files[0]\r\n        this.form.patchValue({image: file})\r\n        this.form.get('image').updateValueAndValidity()\r\n        const reader = new FileReader()\r\n        reader.onload = () => {\r\n            this.imagePreview = reader.result as string\r\n        }\r\n\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    onSavePost(){\r\n        if(this.form.invalid)\r\n            return\r\n        this.isLoading = true\r\n        if(this.mode === \"create\")\r\n            this.postsService.addPost(this.form.value.title, this.form.value.content, this.form.value.image)\r\n        else\r\n            this.postsService.updatePost(this.postId, this.form.value.title, this.form.value.content, this.form.value.image)\r\n\r\n        this.form.reset();\r\n    }\r\n\r\n    ngOnDestroy(){\r\n        this.authStatusSub.unsubscribe()\r\n    }\r\n}\r\n\r\n","<mat-card>\r\n    <mat-spinner *ngIf=\"isLoading\" strokeWidth=8></mat-spinner>\r\n    <form [formGroup]=\"form\" (submit)=\"onSavePost()\" *ngIf=\"!isLoading\">\r\n        <mat-form-field>\r\n            <input \r\n                matInput \r\n                type=\"text\" \r\n                formControlName=\"title\"\r\n                placeholder=\"Название\"\r\n            >\r\n            <mat-error *ngIf=\"form.get('title').invalid\">Введите название</mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <textarea \r\n                matInput \r\n                formControlName=\"content\"\r\n                rows=\"6\"\r\n                placeholder=\"Описание\">\r\n            </textarea>\r\n            <mat-error *ngIf=\"form.get('content').invalid\">Введите описание</mat-error>\r\n        </mat-form-field>\r\n        <div class=\"fileContainer\">\r\n            <button mat-raised-button color=\"link\" type=\"button\" (click)=\"filePicker.click()\">Выбрать файл</button>\r\n            <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\">\r\n        </div>\r\n        <div class=\"image-preview\" *ngIf=\"imagePreview !== '' && imagePreview && form.get('image').valid\">\r\n            <img [src]=\"imagePreview\" [alt]=\"form.value.title\">\r\n        </div>\r\n        <button \r\n            mat-stroked-button\r\n            class='saveBtn'\r\n            color=\"primary\" \r\n            type=\"submit\">Сохранить</button>\r\n    </form>\r\n</mat-card>\r\n\r\n    \r\n\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}